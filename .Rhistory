fit2<-lm(train$PERCENT_POSITIVES~x2)
ggplot(train,aes(x=WEEK,y=PERCENT_POSITIVES))+geom_point()+
geom_line(data=data.frame(x=train$WEEK,y=predict(fit2)),mapping=aes(x,y),color="blue")
# set 3 knots by observation of the plot (week=10,20,40).
x2<-ns(train$WEEK,knots = c(10,20,40))
fit2<-lm(train$PERCENT_POSITIVES~x2)
ggplot(train,aes(x=WEEK,y=PERCENT_POSITIVES))+geom_point()+
geom_line(data=data.frame(x=train$WEEK,y=predict(fit2)),mapping=aes(x,y),color="blue")
# find mean squared error
fit1$df.residual
# find mean squared error
fit1$residuals
# find mean squared error
# model 1
mean((fit1$residuals)^2)
# model 2
mean((fit2$residuals)^2)
# find mean squared error
# model 1
mean((fit1$residuals)^2)
# build and visualize the two models
suppressMessages(library(splines))
# set 3 knots, separating seasons (week=12,24,36)
x1<-ns(train$WEEK,knots = c(12,24,36))
fit1<-lm(train$PERCENT_POSITIVES~x1)
ggplot(train,aes(x=WEEK,y=PERCENT_POSITIVES))+geom_point()+
geom_line(data=data.frame(x=train$WEEK,y=predict(fit1)),mapping=aes(x,y),color="blue")
# set 3 knots by observation of the plot (week=10,20,40).
x2<-ns(train$WEEK,knots = c(10,20,40))
fit2<-lm(train$PERCENT_POSITIVES~x2)
ggplot(train,aes(x=WEEK,y=PERCENT_POSITIVES))+geom_point()+
geom_line(data=data.frame(x=train$WEEK,y=predict(fit2)),mapping=aes(x,y),color="blue")
# find mean squared error
# model 1
mean((fit1$residuals)^2) # 0.003618567
# model 2
mean((fit2$residuals)^2) # 0.003602369
# set 2 knots (week=20,40).
x2<-ns(train$WEEK,knots = c(20,40))
fit2<-lm(train$PERCENT_POSITIVES~x2)
ggplot(train,aes(x=WEEK,y=PERCENT_POSITIVES))+geom_point()+
geom_line(data=data.frame(x=train$WEEK,y=predict(fit2)),mapping=aes(x,y),color="blue")
# model 2
mean((fit2$residuals)^2) # 0.003602369
# load data
flow<-read.csv("data/flow.csv")
View(flow)
# clean data
library(lubridate)
yday(flow$date)
flow$dayofyear<-yday(flow$date)
flow$year<-year(flow$date)
View(flow)
# plot the data
ggplot(flow,aes(x=dayofyear,y=flow))+geom_point()
?geom_smooth
# plot the data
ggplot(flow,aes(x=dayofyear,y=flow))+geom_point()+
labs(x="Day in a Year", y="Daily Discharge")+
geom_smooth(method="loess", span=0.1)
# plot the data
ggplot(flow,aes(x=dayofyear,y=flow))+geom_point()+
labs(x="Day in a Year", y="Daily Discharge")+
geom_smooth(method="loess", span=0.1)+
geom_smooth(method="loess", span=1.5)
# plot the data
ggplot(flow,aes(x=dayofyear,y=flow))+geom_point()+
labs(x="Day in a Year", y="Daily Discharge")+
geom_smooth(method="loess", span=0.1)+
geom_smooth(method="loess", span=0.75)
# plot the data
ggplot(flow,aes(x=dayofyear,y=flow))+geom_point()+
labs(x="Day in a Year", y="Daily Discharge")+
geom_smooth(method="loess", span=0.01)
# plot the data
ggplot(flow,aes(x=dayofyear,y=flow))+geom_point()+
labs(x="Day in a Year", y="Daily Discharge")+
geom_smooth(method="loess", span=0.005)
# plot the data
ggplot(flow,aes(x=dayofyear,y=flow))+geom_point()+
labs(x="Day in a Year", y="Daily Discharge")+
geom_smooth(method="loess", span=0.3)
# plot the data
p<-ggplot(flow,aes(x=dayofyear,y=flow))+geom_point()+
labs(x="Day in a Year", y="Daily Discharge")
p+geom_smooth(method="loess", span=0.5)
p+geom_smooth(method="loess", span=0.3)
p+geom_smooth(method="loess", span=0.01, color="red")+ # too small
geom_smooth(method="loess", span=0.3)+ # just right
geom_smooth(method="loess", span=1,color="green") # too big
p+geom_smooth(method="loess", span=0.01, aes(color="Too small"))+ # too small
geom_smooth(method="loess", span=0.3)+ # just right
geom_smooth(method="loess", span=1,color="green") # too big
p+geom_smooth(method="loess", span=0.01, aes(color="Too small"))+ # too small
geom_smooth(method="loess", span=0.3,aes(color="Just right"))+ # just right
geom_smooth(method="loess", span=1,aes(color="Too big"))+ # too big
scale_color_manual("")
p+geom_smooth(method="loess", span=0.01, aes(color="Too small"))+ # too small
geom_smooth(method="loess", span=0.3,aes(color="Just right"))+ # just right
geom_smooth(method="loess", span=1,aes(color="Too big"))+ # too big
labs(color="Lines with smoothing parameter:")
# I use boxcar function as my kernel regression method
# I do a 3-fold cross validation
# shuffle data first
df<-flow[sample(nrow(flow)),]
# check number of rows
nrow(flow)
# check number of rows
# nrow(flow) 11250, dividing into 1:3750, 3751:7500, 7501:11250
df1<-df[1:3750,]
df2<-df[3751:7500,]
df3<-df[7501:11250,]
?ksmooth
?loess
?ksmooth
?rbind
a<-rbind(df1,df2)
?ksmooth
a<-rbind(df1,df2) # df3 as validation set
b<-rbind(df1,df3) # df2 as validation set
c<-rbind(df3,df2) # df1 as validation set
#
ksmooth(x=a$dayofyear,y=a$flow, kernel = "box", bandwidth = 0.1)
?loess
loess(data=a,flow~dayofyear)
d=loess(data=a,flow~dayofyear)
mean(d$residuals^2)
d=loess(data=a,flow~dayofyear,span = 0.3)
mean(d$residuals^2)
#
# ksmooth(x=a$dayofyear,y=a$flow, kernel = "box", bandwidth = 0.1)
mse<-c()
#
# ksmooth(x=a$dayofyear,y=a$flow, kernel = "box", bandwidth = 0.1)
msel<-c()
for (i in c(0.1,0.2,0.3,0.4,0.5)){
mod1<-loess(data=flow,flow~dayofyear,span = i)
# use mean of square of residuals to find the best span
mse<-mean(mod1$residuals^2)
append(msel,mse)
}
msel
#
# ksmooth(x=a$dayofyear,y=a$flow, kernel = "box", bandwidth = 0.1)
msel<-c()
append(msel,1)
msel
for (i in c(0.1,0.2,0.3,0.4,0.5)){
mod1<-loess(data=flow,flow~dayofyear,span = i)
# use mean of square of residuals to find the best span
mse<-mean(mod1$residuals^2)
msel<-append(msel,mse)
}
msel
plot(c(0.1,0.2,0.3,0.4,0.5),msel)
# use loess function to find the value of span
msel<-c()
span_value<-c(0.05,0.06,0.07,0.08,0.09,0.1,0.2,0.3,0.4,0.5)
for (i in span_value){
mod1<-loess(data=flow,flow~dayofyear,span = i)
# use mean of square of residuals to find the best span
mse<-mean(mod1$residuals^2)
msel<-append(msel,mse)
}
plot(span_value,msel)
mod1
p+geom_smooth(method="loess", span=0.1,degree=0, aes(color="0"))+ # too small
geom_smooth(method="loess", span=0.1,degree=1,aes(color="1"))+ # just right
geom_smooth(method="loess", span=0.1,degree=2,aes(color="2"))+ # too big
labs(color="Degree")
p+geom_smooth(method="loess", span=0.1,degree=0, aes(color="0"))+ # too small
geom_smooth(method="loess", span=0.1,degree=1,aes(color="1")) # just right
p+geom_smooth(method="loess", span=0.1,degree=0, alpha=0.2, aes(color="0"))+ # too small
geom_smooth(method="loess", span=0.1,degree=1,alpha=0.2,aes(color="1")) # just right
?dnorm
c(1:100)
p1<-qplot()+theme_bw()
p1<-qplot()+theme_bw()+labs(x="X",y="Y",title="Local Regression")
p1<-qplot()+theme_bw()+labs(x="X",y="Y",title="Linear Regression")
for (i in c(1:100)){
x<-rnorm(100)
y<-x+rnorm(100)
# local regression, keep default setting for smoothing parameters
fit_local<-loess(y~x)
yhat<-predict(fit_local)
p1<-p1+geom_line(data=data.frame(x=x,y=yhat),mapping = aes(x,y),color="blue",alpha=0.3)
# linear regression
fit_linear<-lm(y~x)
yhat<-predict(fit_linear)
p2<-p2+geom_line(data=data.frame(x=x,y=yhat),mapping = aes(x,y),color="blue",alpha=0.3)
}
p1<-qplot()+theme_bw()+labs(x="X",y="Y",title="Local Regression")
p2<-qplot()+theme_bw()+labs(x="X",y="Y",title="Linear Regression")
for (i in c(1:100)){
x<-rnorm(100)
y<-x+rnorm(100)
# local regression, keep default setting for smoothing parameters
fit_local<-loess(y~x)
yhat<-predict(fit_local)
p1<-p1+geom_line(data=data.frame(x=x,y=yhat),mapping = aes(x,y),color="blue",alpha=0.3)
# linear regression
fit_linear<-lm(y~x)
yhat<-predict(fit_linear)
p2<-p2+geom_line(data=data.frame(x=x,y=yhat),mapping = aes(x,y),color="blue",alpha=0.3)
}
p1
p2
p1<-qplot(xlim = c(-4,4))+theme_bw()+labs(x="X",y="Y",title="Local Regression")
p2<-qplot(xlim = c(-4,4))+theme_bw()+labs(x="X",y="Y",title="Linear Regression")
for (i in c(1:100)){
x<-rnorm(100)
y<-x+rnorm(100)
# local regression, keep default setting for smoothing parameters
fit_local<-loess(y~x)
yhat<-predict(fit_local)
p1<-p1+geom_line(data=data.frame(x=x,y=yhat),mapping = aes(x,y),color="blue",alpha=0.1)
# linear regression
fit_linear<-lm(y~x)
yhat<-predict(fit_linear)
p2<-p2+geom_line(data=data.frame(x=x,y=yhat),mapping = aes(x,y),color="blue",alpha=0.1)
}
p1
p2
set.seed(40)
n <- 300
tibble(x1 = rnorm(n),
x2 = rnorm(n, sd=50),
y  = 4*x1+x2/50+rnorm(n)/4) %>%
ggplot(aes(x1,x2)) +
geom_point(aes(colour=y)) +
scale_colour_viridis("Response\nvalue") +
theme_bw() +
theme(axis.title.y=element_text(angle=0, vjust=0.5))
# load data
flow<-read.csv("data/flow.csv")
# clean data
suppressMessages(library(lubridate))
flow$dayofyear<-yday(flow$date)
flow$year<-year(flow$date)
# plot the data
p<-ggplot(flow,aes(x=dayofyear,y=flow))+geom_point()+
labs(x="Day in a Year", y="Daily Discharge")
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(viridis))
# plot the data
p<-ggplot(flow,aes(x=dayofyear,y=flow))+geom_point()+
labs(x="Day in a Year", y="Daily Discharge")
p+geom_smooth(method="loess",degree=1,aes(color="1"))+ # just right
geom_smooth(method="loess",degree=2,aes(color="2")) # too big
p+geom_smooth(method="loess",degree=1,aes(color="1")) # just right
p+geom_smooth(method="loess",degree=2,aes(color="1")) # just right
install.packages("KernSmooth")
suppressMessages(library(KernSmooth))
locpoly(x=flow$dayofyear,y=flow$flow,degree = 0)
locpoly(x=flow$dayofyear,y=flow$flow,degree = 0,bandwidth = 0.1)
locpoly(x=flow$dayofyear,y=flow$flow,degree = 0,bandwidth = 1)
?ksmooth
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 0.5)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(viridis))
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y))
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
# shuffle data and divide data into 3 sub-groups
n<-nrow(flow)
shuffled_flow<-flow[sample(n),]
df1<-shuffled_flow[1:n/3,]
df1<-shuffled_flow[n/3+1:2*n/3,]
df1<-shuffled_flow[1:n/3,]
df1<-shuffled_flow[n/3+1:2*n/3,]
df1<-shuffled_flow[1:n/3,]
n/3
df1<-shuffled_flow[1:n/3,]
df1<-shuffled_flow[1:(n/3),]
df2<-shuffled_flow[(1+n/3):(2*n/3),]
df3<-shuffled_flow[(2*n/3+1):n,]
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 1)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 5)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 10)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 20)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 25)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 30)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 50)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
length(try$y)
View(flow)
try$x
try$y
flow$flow-try$y
dpill(x=flow$dayofyear,y=flow$flow)
suppressMessages(library(KernSmooth))
dpill(x=flow$dayofyear,y=flow$flow)
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 4)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
try$x
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 4)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 10)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 6)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 10)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 1)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 0.1)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
# plot the data
p<-ggplot(flow,aes(x=dayofyear,y=flow))+geom_point(alpha=0.2)+
labs(x="Day in a Year", y="Daily Discharge")
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 0.5)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
try<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 60)
p+geom_line(data=data.frame(x=try$x,y=try$y),mapping=aes(x,y),color="blue")
try1<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 60)
try2<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 10)
try3<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 0.5)
p+geom_line(data=data.frame(x=try1$x,y=try1$y),mapping=aes(x,y),color="Too big")+
geom_line(data=data.frame(x=try2$x,y=try2$y),mapping=aes(x,y),color="Just right")+
geom_line(data=data.frame(x=try3$x,y=try3$y),mapping=aes(x,y),color="Too small")
p+geom_line(data=data.frame(x=try1$x,y=try1$y),mapping=aes(x,y,color="Too big"))+
geom_line(data=data.frame(x=try2$x,y=try2$y),mapping=aes(x,y,color="Just right"))+
geom_line(data=data.frame(x=try3$x,y=try3$y),mapping=aes(x,y,color="Too small"))
#######################
p+geom_smooth(method="loess", span=0.01, aes(color="Too small"))+ # too small
geom_smooth(method="loess", span=0.1,aes(color="Just right"))+ # just right
geom_smooth(method="loess", span=1,aes(color="Too big"))+ # too big
labs(color="Lines with \n smoothing parameter:")
try1<-ksmooth(x=flow$dayofyear,y=flow$flow,kernel="normal",bandwidth = 100)
p+geom_line(data=data.frame(x=try1$x,y=try1$y),mapping=aes(x,y,color="Too big"))+
geom_line(data=data.frame(x=try2$x,y=try2$y),mapping=aes(x,y,color="Just right"))+
geom_line(data=data.frame(x=try3$x,y=try3$y),mapping=aes(x,y,color="Too small"))+
labs(color="Lines with \nsmoothing parameter:")
locpoly(x=flow$dayofyear,y=flow$flow,degree = 0,bandwidth = 1)
?locpoly
try1<-locpoly(x=flow$dayofyear,y=flow$flow,degree = 0,bandwidth = 10)
try2<-locpoly(x=flow$dayofyear,y=flow$flow,degree = 1,bandwidth = 10)
try3<-locpoly(x=flow$dayofyear,y=flow$flow,degree = 2,bandwidth = 10)
p+geom_line(data=data.frame(x=try1$x,y=try1$y),mapping=aes(x,y,color="0"))+
geom_line(data=data.frame(x=try3$x,y=try3$y),mapping=aes(x,y,color="2"))+
geom_line(data=data.frame(x=try2$x,y=try2$y),mapping=aes(x,y,color="1"))+
labs(color="Degree:")
p+geom_line(data=data.frame(x=try1$x,y=try1$y),mapping=aes(x,y,color="0"))
p+geom_line(data=data.frame(x=try1$x,y=try1$y),mapping=aes(x,y,color="0"))+
geom_line(data=data.frame(x=try3$x,y=try3$y),mapping=aes(x,y,color="2"))+
geom_line(data=data.frame(x=try2$x,y=try2$y),mapping=aes(x,y,color="1"))+
labs(color="Degree:")
p+geom_line(data=data.frame(x=try1$x,y=try1$y),mapping=aes(x,y,color="0"))+
geom_line(data=data.frame(x=try3$x,y=try3$y),mapping=aes(x,y,color="2"))+
geom_line(data=data.frame(x=try2$x,y=try2$y),mapping=aes(x,y,color="1"))
p+geom_line(data=data.frame(x=try1$x,y=try1$y),mapping=aes(x,y,color="0"))+
geom_line(data=data.frame(x=try3$x,y=try3$y),mapping=aes(x,y,color="2"))+
geom_line(data=data.frame(x=try2$x,y=try2$y),mapping=aes(x,y,color="1"))
p+geom_line(data=data.frame(x=try1$x,y=try1$y),mapping=aes(x,y,color="0"))+
geom_line(data=data.frame(x=try3$x,y=try3$y),mapping=aes(x,y,color="2"))
p+geom_line(data=data.frame(x=try1$x,y=try1$y),mapping=aes(x,y,color="0"))+
# geom_line(data=data.frame(x=try3$x,y=try3$y),mapping=aes(x,y,color="2"))
geom_line(data=data.frame(x=try2$x,y=try2$y),mapping=aes(x,y,color="1"))+
labs(color="Degree:")
# add true mean curve
p1+geom_abline(intercept = 0,slope=1)
p1<-qplot(xlim = c(-4,4))+theme_bw()+labs(x="X",y="Y",title="Local Regression")
p2<-qplot(xlim = c(-4,4))+theme_bw()+labs(x="X",y="Y",title="Linear Regression")
for (i in c(1:100)){
x<-rnorm(100)
y<-x+rnorm(100)
# local regression, keep default setting for smoothing parameters
fit_local<-loess(y~x)
yhat<-predict(fit_local)
p1<-p1+geom_line(data=data.frame(x=x,y=yhat),mapping = aes(x,y),color="blue",alpha=0.1)
# linear regression
fit_linear<-lm(y~x)
yhat<-predict(fit_linear)
p2<-p2+geom_line(data=data.frame(x=x,y=yhat),mapping = aes(x,y),color="blue",alpha=0.1)
}
# add true mean curve
p1+geom_abline(intercept = 0,slope=1)
p2+geom_abline(intercept = 0,slope=1)
# add true mean curve
p1+geom_abline(intercept = 0,slope=1,color="red",xlim=c(-4,4))
p2+geom_abline(intercept = 0,slope=1,color="red",xlim=c(-4,4))
p1+geom_abline(intercept = 0,slope=1,color="red",xlim=c(-4,4))
p2+geom_abline(intercept = 0,slope=1,color="red",xlim=c(-4,4))
knitr::opts_chunk$set(echo = TRUE, fig.width=7, fig.height=5, fig.align = "center")
ggplot() +
# background map
geom_polygon(data=map_usa, aes(x = long, y = lat, group = group),alpha=0.7) +
geom_text(data=label, aes(label=group,x=x,y=y))
library(shiny)
library(tidyverse)
library(forcats)
ggplot() +
# background map
geom_polygon(data=map_usa, aes(x = long, y = lat, group = group),alpha=0.7) +
geom_text(data=label, aes(label=group,x=x,y=y))
# import data
data<-read.csv("https://raw.github.ubc.ca/ubc-mds-2017/DSCI_532_milestone1_qyue2014/master/data/marshall/ucr_crime_1975_2015.csv?token=AAADszx30g6sUEv5VEhvsCn44iJBnQOaks5ablAWwA%3D%3D")
# remove Nas
data<-na.omit(data)
# To keep consistency, I remove incomplete records that did not report crime for all 12 months
# in a given year
data<-filter(data,months_reported==12)
library(stringi)
data$ORI<-as.character(data$ORI)
data$state<-sapply(data$ORI,function(x) stri_sub(x,from = 1,to=2))
data$state<-factor(data$state)
# Again, exclude features that I do not want: months_reported
data<-data[-4]
# check what is "NB"
# filter(data, state=="NB") # By checking with website, I find that the "NB" is actually "NE"
data$state <- as.character(data$state)
data$state[data$state == "NB"] <- "NE"
data$state <- factor(data$state)
crime<-data
# get data to make the map
library(maps)
map_usa<-map_data("state")
usa_states<-map_data("state")
usa_states<-usa_states[-6]
# need to reset wd here
sabbr<-read.csv("https://raw.githubusercontent.com/TinaQian2017/Milestone_532_new/master/data/states_abbr.csv",header = T)
sabbr$region<-as.character(sabbr$region)
mapindex<-left_join(usa_states,sabbr)
mapdata<-full_join(mapindex,data)
# change headers
names(mapdata)[11:14]<-c('Homicides', 'Rape', 'Robbery', 'Aggravated_Assault')
names(crime)[5:8]<-c('Homicides', 'Rape', 'Robbery', 'Aggravated_Assault')
ggplot() +
# background map
geom_polygon(data=map_usa, aes(x = long, y = lat, group = group),alpha=0.7) +
geom_text(data=label, aes(label=group,x=x,y=y))
label<-mapdata %>% group_by(state) %>% summarise(y=mean(lat),x=mean(long))
ggplot() +
# background map
geom_polygon(data=map_usa, aes(x = long, y = lat, group = group),alpha=0.7) +
geom_text(data=label, aes(label=group,x=x,y=y))
ggplot() +
# background map
geom_polygon(data=map_usa, aes(x = long, y = lat, group = group),alpha=0.7) +
geom_text(data=label, aes(label=state,x=x,y=y))
?geom_text
ggplot() +
# background map
geom_polygon(data=map_usa, aes(x = long, y = lat, group = group),alpha=0.7) +
geom_text(data=label, aes(label=state,x=x,y=y),check_overlap=TRUE)
View(label)
runApp('MDS/532/Milestone_532_new')
View(label)
label$state[-1]<-"ND"
View(label)
# prepare data to add labels in map
label<-mapdata %>% group_by(state) %>% summarise(y=mean(lat),x=mean(long))
label$state[48]<-"ND"
View(label)
runApp('MDS/532/Milestone_532_new')
View(mapdata)
View(label)
ggplot() +
# background map
geom_polygon(data=map_usa, aes(x = long, y = lat, group = group),alpha=0.7) +
geom_text(data=label, aes(label=state,x=x,y=y),check_overlap=TRUE)
runApp('MDS/532/Milestone_532_new')
runApp('MDS/532/Milestone_532_new')
View(label)
label<-label$state[48]<-"ND"
runApp('MDS/532/Milestone_532_new')
label_c<-label
# prepare data to add labels in map
label<-mapdata %>% group_by(state) %>% summarise(y=mean(lat),x=mean(long))
label$state[48]<-"ND"
label_c<-label
View(label_c)
runApp('MDS/532/Milestone_532_new')
View(label)
runApp('MDS/532/Milestone_532_new')
runApp('MDS/532/Milestone_532_new')
runApp('MDS/532/Milestone_532_new')
runApp('MDS/532/Milestone_532_new')
label<-mapdata %>% group_by(state) %>% summarise(y=mean(lat,na.rm=TRUE),x=mean(long,na.rm=TRUE))
View(label)
runApp('MDS/532/Milestone_532_new')
label<-label
runApp('MDS/532/Milestone_532_new')
# prepare data to add labels in map
label<-mapdata %>% group_by(state) %>% summarise(y=mean(lat),x=mean(long))
label %>%filter(is.na(state))
hh<-label %>%filter(is.na(state)) %>% mutate(state="ND")
rbind(label,hh)
runApp('MDS/532/Milestone_532_new')
View(hh)
runApp('MDS/532/Milestone_532_new')
runApp('MDS/532/Milestone_532_new')
runApp('MDS/532/Milestone_532_new')
runApp('MDS/532/Milestone_532_new')
runApp('MDS/532/Milestone_532_new')
?theme_classic
runApp('MDS/532/Milestone_532_new')
runApp('MDS/532/Milestone_532_new')
library(rsconnect)
rsconnect::setAccountInfo(name='tinaqian2017',
token='E387D960A5A5D5141830AF82BC7E301B',
secret='yqmPn17BOpSp94824RHgRRLm+cYm/uu5qt7tsqPu')
deployApp()
setwd("~/MDS/532/Milestone_532_new")
deployApp()
